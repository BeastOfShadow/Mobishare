@page
@using Mobishare.Core.Enums.Chat
@model Mobishare.App.Pages.ChatModel
@{
    Layout = null;
}

<link rel="stylesheet" href="~/css/chat.css">

<div id="chatBox">
    <input type="hidden" id="conversationId" value="@(Model.CurrentConversation.Id)" />
    @if (Model.Messages != null && Model.Messages.Any())
    {
        foreach (var msg in Model.Messages)
        {
            <div class="@(msg.Sender == MessageSenderType.User.ToString() ? "user-message" : "ai-message")">
                @msg.Message
                <br />
                <small><em>@msg.CreatedAt.ToLocalTime().ToString("g")</em></small>
            </div>
        }
    }
    else
    {
        <div>Nessun messaggio presente.</div>
    }
</div>


<div id="inputContainer">
    <textarea id="userInput" rows="1" placeholder="Type a message..."></textarea>
    <button onclick="sendMessage()">Send</button>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.min.js"></script>
<script>
    const chatBox = document.getElementById("chatBox");
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chathub")
        .build();

    let currentBotMessage = null;

    let currentBotTimeout = null;
    let currentBotDateTime = null;

    connection.on("ReceiveMessage", (user, message, dateTime) => {
        if (user === "MobishareBot") {
            if (!currentBotMessage) {
                currentBotMessage = document.createElement("div");
                currentBotMessage.classList.add("ai-message");
                currentBotMessage.innerHTML = ` <span class="content"></span>`;
                chatBox.appendChild(currentBotMessage);
                currentBotDateTime = dateTime;
            }

            const contentSpan = currentBotMessage.querySelector(".content");
            contentSpan.textContent += message;

            // Se ci sono altri token in arrivo, resettiamo il timeout
            if (currentBotTimeout) clearTimeout(currentBotTimeout);

            // Impostiamo un timeout per chiudere il messaggio dopo 1 secondo di inattivitÃ 
            currentBotTimeout = setTimeout(() => {
                const timeElem = document.createElement("small");
                timeElem.innerHTML = `<br /><em>${currentBotDateTime}</em>`;
                currentBotMessage.appendChild(timeElem);

                currentBotMessage = null;
                currentBotTimeout = null;
                currentBotDateTime = null;
            }, 500); // timeout = tempo massimo tra token consecutivi
        } else {
            const userMsg = document.createElement("div");
            userMsg.classList.add("user-message");
            userMsg.innerHTML = `
            ${message}
            <br />
            <small><em>${dateTime}</em></small>
        `;
            chatBox.appendChild(userMsg);
            currentBotMessage = null;
        }

        chatBox.scrollTop = chatBox.scrollHeight;
    });

    connection.start().catch(err => console.error(err.toString()));

    document.getElementById("userInput").addEventListener("keydown", function (e) {
        if (e.key === "Enter" && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });


    function sendMessage() {
        const input = document.getElementById("userInput");
        const msg = input.value.trim();
        const id = document.getElementById("conversationId").value;
        if (!msg) return;
        connection.invoke("SendMessage", id, msg).catch(err => console.error(err.toString()));
        input.value = "";
        currentBotMessage = null; // resetta ogni volta che invii
    }
</script>
